package opendata.a00965170.comp3717.bcit.ca.database.schema;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import opendata.a00965170.comp3717.bcit.ca.database.schema.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "DATASETS".
 */
@Entity(active = true)
public class Datasets {

    @Id(autoincrement = true)
    private Long id;

    @NotNull
    private String datasets_name;
    private String datasets_metadata;
    private Long category_id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient DatasetsDao myDao;

    @ToOne(joinProperty = "category_id")
    private Categories categories;

    @Generated
    private transient Long categories__resolvedKey;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "category_id")
    })
    @OrderBy("datasets_name ASC")
    private List<Datasets> datasetsList;

    @Generated
    public Datasets() {
    }

    public Datasets(Long id) {
        this.id = id;
    }

    @Generated
    public Datasets(Long id, String datasets_name, String datasets_metadata, Long category_id) {
        this.id = id;
        this.datasets_name = datasets_name;
        this.datasets_metadata = datasets_metadata;
        this.category_id = category_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDatasetsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    public String getDatasets_name() {
        return datasets_name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDatasets_name(@NotNull String datasets_name) {
        this.datasets_name = datasets_name;
    }

    public String getDatasets_metadata() {
        return datasets_metadata;
    }

    public void setDatasets_metadata(String datasets_metadata) {
        this.datasets_metadata = datasets_metadata;
    }

    public Long getCategory_id() {
        return category_id;
    }

    public void setCategory_id(Long category_id) {
        this.category_id = category_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Categories getCategories() {
        Long __key = this.category_id;
        if (categories__resolvedKey == null || !categories__resolvedKey.equals(__key)) {
            __throwIfDetached();
            CategoriesDao targetDao = daoSession.getCategoriesDao();
            Categories categoriesNew = targetDao.load(__key);
            synchronized (this) {
                categories = categoriesNew;
            	categories__resolvedKey = __key;
            }
        }
        return categories;
    }

    @Generated
    public void setCategories(Categories categories) {
        synchronized (this) {
            this.categories = categories;
            category_id = categories == null ? null : categories.getId();
            categories__resolvedKey = category_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Datasets> getDatasetsList() {
        if (datasetsList == null) {
            __throwIfDetached();
            DatasetsDao targetDao = daoSession.getDatasetsDao();
            List<Datasets> datasetsListNew = targetDao._queryDatasets_DatasetsList(id);
            synchronized (this) {
                if(datasetsList == null) {
                    datasetsList = datasetsListNew;
                }
            }
        }
        return datasetsList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetDatasetsList() {
        datasetsList = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
